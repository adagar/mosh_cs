1
00:00:00,870 --> 00:00:03,370
OK now let's take a look at the For Each loop.

2
00:00:03,420 --> 00:00:08,460
But before we started with that let me write a simple program with for loop and then I'm going to show

3
00:00:08,460 --> 00:00:13,200
you how for each makes a program cleaner and easier to understand.

4
00:00:13,200 --> 00:00:22,270
So let's imagine we have a strain called name so var name = we set it to John Smith.

5
00:00:23,640 --> 00:00:27,020
So is strange as you know is a sequence of characters.

6
00:00:27,210 --> 00:00:28,860
It's an Enumerable object.

7
00:00:29,070 --> 00:00:30,140
It's like a list.

8
00:00:30,450 --> 00:00:32,570
So we can iterate over that.

9
00:00:32,580 --> 00:00:38,110
So now I want to iterate over the string and I want to display each character on a new line.

10
00:00:38,550 --> 00:00:39,840
So I started with a for loop

11
00:00:42,420 --> 00:00:46,000
.

12
00:00:49,980 --> 00:00:51,380
So I see what's happening here.

13
00:00:51,570 --> 00:00:58,650
This time I'm sitting my counter variable or I to 0 because the index of the first character in a string

14
00:00:58,860 --> 00:01:02,990
is 0 and I'm going to increment I one at a time.

15
00:01:03,120 --> 00:01:06,610
As long as I eat less than the length of name.

16
00:01:06,720 --> 00:01:12,480
So as you see here each string like name has a property called length which returns the length of that

17
00:01:12,480 --> 00:01:13,320
string.

18
00:01:13,730 --> 00:01:13,950
OK.

19
00:01:13,950 --> 00:01:16,480
Now let's display each character on a new line.

20
00:01:16,710 --> 00:01:20,910
So consolers right line name of.

21
00:01:21,480 --> 00:01:22,630
Pretty simple right.

22
00:01:22,860 --> 00:01:27,000
Let's run the application.

23
00:01:27,270 --> 00:01:30,560
So that's the alphabet I was talking about.

24
00:01:30,600 --> 00:01:34,640
Now let's see how we can we write the same code using a For Each loop.

25
00:01:34,680 --> 00:01:35,160
So

26
00:01:41,000 --> 00:01:47,610
with 4 h I don't have to worry about a counter variable like I I don't have to set it to an initial

27
00:01:47,610 --> 00:01:49,050
value like 0.

28
00:01:49,080 --> 00:01:54,480
I don't have to compare it against some other value like name that links and I don't have to increment

29
00:01:54,480 --> 00:01:55,390
it.

30
00:01:55,410 --> 00:02:02,340
So instead we have a variable here called character which in each step of the iteration holds one character

31
00:02:02,370 --> 00:02:03,900
of the string.

32
00:02:03,900 --> 00:02:09,030
Also interestingly note that in the console the WriteLine we can simply display character instead of

33
00:02:09,030 --> 00:02:10,380
accessing the character.

34
00:02:10,390 --> 00:02:13,430
I had to give an index in the name variable.

35
00:02:13,640 --> 00:02:13,880
OK.

36
00:02:13,890 --> 00:02:16,440
Now let me comment out our for loop.

37
00:02:16,440 --> 00:02:17,100
So

38
00:02:20,080 --> 00:02:22,880
with control K and control C.

39
00:02:23,520 --> 00:02:26,630
Now let's run the application.

40
00:02:27,060 --> 00:02:30,770
We got the exact same outputs.

41
00:02:31,980 --> 00:02:38,400
So whenever we have an Enumerable object like a string or an array or any kind of list it's much easier

42
00:02:38,430 --> 00:02:40,900
to iterate over them using a for each.

43
00:02:40,980 --> 00:02:44,520
Let's change this example and I iterate over an array.

44
00:02:44,640 --> 00:02:49,870
So I'm going to clean up everything here.

45
00:02:50,340 --> 00:02:54,360
Now I'm going to define an array of numbers bar numbers

46
00:02:57,160 --> 00:02:58,090
and I'm going to use.

47
00:02:58,140 --> 00:03:02,600
Object initialization syntax to initialize other array with some numbers.

48
00:03:02,760 --> 00:03:04,600
So that looks like this.

49
00:03:04,790 --> 00:03:08,850
One two three more.

50
00:03:09,030 --> 00:03:14,760
So with arrays as you see we have to instantiate them using the new OPERATOR OK.

51
00:03:14,760 --> 00:03:26,800
Now let's iterate over this array for each var number in numbers console dot WriteLine number.

52
00:03:28,680 --> 00:03:33,600
That's one application.

53
00:03:37,650 --> 00:03:41,260
So as you see for each is an easier way to iterate over a list

