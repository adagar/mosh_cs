1
00:00:02,450 --> 00:00:05,870
OK, llegamos a las declaraciones condicionales en esta conferencia.

2
00:00:05,880 --> 00:00:10,440
Vamos a hablar sobre las construcciones de lenguaje de C-Sharp que se utilizan, estamos

3
00:00:10,440 --> 00:00:14,530
controlando la ejecucin del programa y C-Sharp tenemos dos tipos de declaraciones condicionales.

4
00:00:14,700 --> 00:00:15,920
Tenemos ms.

5
00:00:16,110 --> 00:00:22,710
Y tenemos conmutador y caso, tambin tenemos un operador condicional que es bsicamente una forma corta de

6
00:00:22,710 --> 00:00:24,270
escribir un beb ms.

7
00:00:24,330 --> 00:00:27,550
Echemos un vistazo ms de cerca a cada una de estas declaraciones.

8
00:00:28,440 --> 00:00:34,620
Aqu est la estructura bsica de las declaraciones if con si siempre tenemos una condicin que

9
00:00:34,620 --> 00:00:40,710
est encerrada en prtesis seguida de una declaracin que se ejecutar si la condicin es verdadera.

10
00:00:40,770 --> 00:00:47,100
De hecho, podemos tener un LCF con otra condicin y nuevamente otra declaracin que se ejecutar

11
00:00:47,190 --> 00:00:52,070
si la condicin es verdadera y opcionalmente podemos tener una declaracin de Elsin.

12
00:00:52,230 --> 00:01:00,120
Entonces, si ninguna de las condiciones anteriores es verdadera, entonces esta parte del cdigo se ejecutar si tenemos ms

13
00:01:00,120 --> 00:01:07,100
de una lnea de cdigo despus de las declaraciones if o else, siempre debemos encerrarlas con llaves.

14
00:01:07,170 --> 00:01:10,130
Tambin podemos usar eso si solo tenemos una lnea de cdigo.

15
00:01:10,190 --> 00:01:12,980
Tambin puede anidar si las declaraciones dentro de la otra.

16
00:01:13,080 --> 00:01:16,170
As que aqu, como ves, tengo una declaracin if.

17
00:01:16,170 --> 00:01:20,220
Y dentro de este cuerpo tengo otra declaracin if else.

18
00:01:20,220 --> 00:01:28,050
Ahora, una cosa que quiero advertirle es que evite el uso de mltiples instrucciones anidadas si las declaraciones anidadas mltiples resultan

19
00:01:28,050 --> 00:01:33,620
en cdigo que es difcil de leer, son difciles de entender y de difcil mantenimiento.

20
00:01:33,660 --> 00:01:35,660
Entonces eso es lo que llamamos un cdigo olor.

21
00:01:35,760 --> 00:01:39,320
Y eso es algo que debes evitar todo el tiempo.

22
00:01:39,430 --> 00:01:45,480
Entonces, cada uno es ligeramente diferente de si con si normalmente tenemos una condicin que se evala y

23
00:01:45,480 --> 00:01:52,290
si es cierto y algn fragmento de cdigo se ejecutar con el interruptor; sin embargo, tenemos un valor y comparamos

24
00:01:52,290 --> 00:01:55,260
el valor de esa variable con valores diferentes.

25
00:01:55,260 --> 00:02:00,240
Entonces, en este caso, tengo un interruptor en una variable llamada Roll, que es una enumeracin.

26
00:02:00,510 --> 00:02:02,490
Tengo dos declaraciones de casos aqu.

27
00:02:02,580 --> 00:02:07,130
Al menos deberamos tener uno pero puede tener ms dependiendo de sus circunstancias.

28
00:02:07,340 --> 00:02:12,330
As que estoy comparando el valor de rodar con este aqu rodar hacia abajo el administrador.

29
00:02:12,330 --> 00:02:16,480
Entonces, si el rollies es admin, entonces se ejecutar este fragmento de cdigo.

30
00:02:16,750 --> 00:02:20,820
Y tenga en cuenta que cada declaracin de caso se termina por la declaracin de Brecqhou.

31
00:02:21,060 --> 00:02:24,330
Luego tengo otra declaracin de caso.

32
00:02:24,330 --> 00:02:28,520
Entonces, si el rol es moderador, se ejecutar este fragmento de cdigo.

33
00:02:29,130 --> 00:02:34,320
Si ninguna de estas condiciones es verdadera, entonces se ejecutar el bloque predeterminado.

34
00:02:34,470 --> 00:02:38,090
Y, por supuesto, necesitamos tener una declaracin de interrupcin aqu tambin.

35
00:02:38,100 --> 00:02:41,690
Ahora vayamos a codificar y explorar cada uno de estos carros en accin

