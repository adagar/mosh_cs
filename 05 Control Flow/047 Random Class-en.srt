1
00:00:01,370 --> 00:00:07,080
And this video I'm going to show you a useful class you know in dot net framework which is called random

2
00:00:07,080 --> 00:00:07,440
.

3
00:00:07,560 --> 00:00:10,620
We use this class to generate random numbers.

4
00:00:10,680 --> 00:00:18,270
So first we create an instance of the random class.

5
00:00:19,440 --> 00:00:22,740
This class has a few useful methods.

6
00:00:22,740 --> 00:00:30,090
Next we took turns around a manager next bytes which takes a bite array and fills it with some random

7
00:00:30,090 --> 00:00:36,000
numbers so you can create a byte array of any size pass it to this method and this method will fill

8
00:00:36,000 --> 00:00:43,980
that byte rate with some random numbers and next double which returns a random double between 0 and

9
00:00:44,040 --> 00:00:45,630
1.

10
00:00:45,630 --> 00:00:50,020
Let's take a look at the next method.

11
00:00:50,160 --> 00:00:53,360
This method has three overloads as you see on the screen.

12
00:00:53,610 --> 00:00:59,570
The first one takes no parameters and it simply returns a non-negative random number.

13
00:00:59,610 --> 00:01:06,900
So let's create a for loop and generate a few random numbers and display them on the console

14
00:01:06,920 --> 00:01:12,600
.

15
00:01:18,270 --> 00:01:22,910
OK let's run the application.

16
00:01:23,340 --> 00:01:27,900
So you see some random numbers here.

17
00:01:28,020 --> 00:01:31,460
Now there is something interesting we can do with the next method.

18
00:01:31,770 --> 00:01:34,630
Let's take a look at this method again.

19
00:01:35,850 --> 00:01:38,540
The second overload takes a maximum value.

20
00:01:39,060 --> 00:01:42,420
And the third overload takes a min and max value.

21
00:01:42,480 --> 00:01:46,320
This is very useful when we want to limit the range of random numbers.

22
00:01:46,350 --> 00:01:51,920
So if you want to create random numbers between 1 and 10 we simply supply them here.

23
00:01:52,500 --> 00:01:54,840
Let's run the application again.

24
00:01:56,370 --> 00:02:00,390
So now we have random numbers between 1 and 10.

25
00:02:00,390 --> 00:02:04,830
We can use this technique to even generate random characters like random passwords.

26
00:02:05,460 --> 00:02:08,970
Each character internally is represented using a number.

27
00:02:09,120 --> 00:02:13,730
Because computers don't understand characters and letters they understand numbers.

28
00:02:13,800 --> 00:02:15,670
Let me show you what I mean by that.

29
00:02:16,260 --> 00:02:25,170
So I temporarily comment this out and all I want to do is display a character a on the console.

30
00:02:25,350 --> 00:02:30,690
But I want to cast it to an integer.

31
00:02:31,260 --> 00:02:33,010
We got 97.

32
00:02:33,010 --> 00:02:38,210
So 97 is the standard number to represent a lowercase a in a computer.

33
00:02:38,250 --> 00:02:45,120
This was first introduced as ASCII which stands for American Standard code for international interchange

34
00:02:45,120 --> 00:02:45,780
.

35
00:02:45,780 --> 00:02:52,020
Let's take a look at this Web site Aski dash code dot com.

36
00:02:52,020 --> 00:02:58,210
So in this table you can see the letters like let me show you here like.

37
00:02:58,230 --> 00:03:06,270
Plus you know all these numbers are alphabets in a uppercase a to that Laura case.

38
00:03:06,270 --> 00:03:14,150
See all these characters have a number represented in decimal format which is here.

39
00:03:14,430 --> 00:03:17,550
And they also have a binary representation.

40
00:03:17,580 --> 00:03:20,250
This is eventually what the computer understands.

41
00:03:20,280 --> 00:03:25,350
Now if you look at 6:51 you see Alora Casey.

42
00:03:25,890 --> 00:03:27,950
And let's take a look at the Zad.

43
00:03:28,140 --> 00:03:30,890
So that is Hundred and 22.

44
00:03:31,410 --> 00:03:39,450
So what this means is if you generate a random number between 97 and 122 and then cast it to a character

45
00:03:39,630 --> 00:03:45,480
we'll get around no character and we can repeat this a few times and generate a random string like a

46
00:03:45,480 --> 00:03:46,290
password.

47
00:03:46,590 --> 00:03:50,040
Let's give it a try.

48
00:03:50,040 --> 00:03:54,250
So let's bring this back in.

49
00:03:54,630 --> 00:04:01,290
What I want to change here is limit the range to 97 and 122.

50
00:04:01,350 --> 00:04:05,990
Now if you run this application we are going to get a number coming from the next method.

51
00:04:06,150 --> 00:04:07,940
So we need to cast the true character

52
00:04:10,590 --> 00:04:15,330
and I'm going to change right line to right because I don't want this character to be on a new line

53
00:04:15,330 --> 00:04:16,150
.

54
00:04:16,200 --> 00:04:22,190
Let's run the application this press any key to continue message is missing up with.

55
00:04:22,190 --> 00:04:28,480
Also let me add a constant the right lane here so you can see more clearly.

56
00:04:28,530 --> 00:04:29,370
There you go.

57
00:04:29,370 --> 00:04:33,460
So here's a random string.

58
00:04:34,110 --> 00:04:37,520
Now a tiny problem with this code is,  if  someone look at this code.

59
00:04:37,650 --> 00:04:41,080
They have no idea what is 97 and 122.

60
00:04:41,400 --> 00:04:46,130
So let me show you a more expressive way to write the same code.

61
00:04:46,200 --> 00:04:57,180
What we can do is replace that with 0 and 26 because we have 26 characters in the English alphabet.

62
00:04:57,180 --> 00:05:05,950
Now we get a number between 0 and 26 if we had that number two character eight.

63
00:05:07,530 --> 00:05:09,070
What do you think is going to happen.

64
00:05:09,480 --> 00:05:11,630
Well this is a character.

65
00:05:11,760 --> 00:05:14,200
And internally it is represented as a number.

66
00:05:14,580 --> 00:05:19,210
And when we add this character to a number the result is going to be a number.

67
00:05:19,320 --> 00:05:20,780
Then we cast it to a character.

68
00:05:20,790 --> 00:05:22,750
So eventually we get the same result.

69
00:05:22,800 --> 00:05:23,760
A random character

70
00:05:28,800 --> 00:05:33,730
now in the real world we don't want to create a random string and displayed on the console.

71
00:05:33,780 --> 00:05:38,760
Most likely we would like to store it in a string but there is a tiny problem here.

72
00:05:38,760 --> 00:05:44,190
In the last section I told you that strings are immutable which means once you create them you cannot

73
00:05:44,190 --> 00:05:45,420
change them.

74
00:05:45,450 --> 00:05:50,150
Of course there are methods that you can play on a string and you get an updated value.

75
00:05:50,550 --> 00:05:54,280
But in every case the original string is not affected.

76
00:05:54,300 --> 00:05:56,320
You always get a new string.

77
00:05:56,340 --> 00:06:01,950
So in C-sharp we cannot create a string and set each individual characters using a random character

78
00:06:01,960 --> 00:06:02,250
.

79
00:06:02,550 --> 00:06:09,900
But what we can do instead is to store this result in an array and then create a string based on that

80
00:06:09,900 --> 00:06:10,610
array.

81
00:06:10,620 --> 00:06:12,360
Let me show you how it works.

82
00:06:12,360 --> 00:06:12,840
So

83
00:06:16,500 --> 00:06:23,020
first I declare a character array let's call it buffer.

84
00:06:24,210 --> 00:06:28,650
And because you're are generating 10 random characters here I'm going to set the size of this or eight

85
00:06:28,650 --> 00:06:31,120
to 10.

86
00:06:32,340 --> 00:06:34,170
And of course we can use var here.

87
00:06:34,170 --> 00:06:44,280
And as you see the green highlight is indicating that the code is cleaner now instead of displaying

88
00:06:44,310 --> 00:06:45,990
each character on the console.

89
00:06:45,990 --> 00:06:48,510
Because simply stored in the buffer.

90
00:06:48,630 --> 00:06:52,590
So let's get rid of this console right and

91
00:06:56,100 --> 00:06:58,990
store it in the buffer.

92
00:06:59,070 --> 00:07:08,790
So I'm using I the loop counter variable to access an element in the buffer every now and the last step

93
00:07:08,790 --> 00:07:13,620
is to create a string based on that character array.

94
00:07:13,740 --> 00:07:17,950
Now most of the time we create a string like this.

95
00:07:19,320 --> 00:07:25,680
So we use a string literal but there is a less common way to create a string and C-Sharp is not something

96
00:07:25,680 --> 00:07:31,380
that you use everyday but it's good to know that as something in your toolbox so use the new operator

97
00:07:32,820 --> 00:07:38,220
if you remember from last section the string keyword maps to a string class in the dot net framework

98
00:07:38,220 --> 00:07:38,850
.

99
00:07:38,850 --> 00:07:43,090
And you know that with classes you can create an instance of them using the new operator.

100
00:07:43,350 --> 00:07:45,080
So we can't do news Stream.

101
00:07:45,780 --> 00:07:50,890
And look here in the constructor of a string we have a few overloads.

102
00:07:51,270 --> 00:07:54,510
The last one as you see here takes a character array.

103
00:07:55,020 --> 00:08:00,670
So if we pass our buffer here we will get a string based on the character orrery.

104
00:08:00,870 --> 00:08:07,870
Now we can display this password which is a string on the console.

105
00:08:08,330 --> 00:08:11,520
Look we've got the same result.

106
00:08:12,180 --> 00:08:18,450
One last thing I would like to add here to improve the quality of this tiny little code and that is

107
00:08:18,780 --> 00:08:22,730
I don't like this magic numbers here 10 here and 10 here.

108
00:08:22,740 --> 00:08:28,710
The problem with this is if tomorrow we decide to change the length of our random password we have to

109
00:08:28,710 --> 00:08:36,420
come here and change this 10 to 8 and we have to remember to do this here as well.

110
00:08:36,420 --> 00:08:44,050
So a better way is to declare a constant like password length.

111
00:08:44,490 --> 00:08:46,520
Set it to 10.

112
00:08:47,130 --> 00:08:49,780
We can use that to create our array.

113
00:08:50,670 --> 00:08:55,010
And of course using it in the for loop.

114
00:08:55,420 --> 00:08:58,620
The code is more expressive and more reliable.

115
00:08:59,070 --> 00:09:01,900
So that's all you need to know about random class.

116
00:09:01,950 --> 00:09:03,010
I hope you enjoy this lecture.

117
00:09:03,060 --> 00:09:03,930
And thank you for watching

