1
00:00:03,230 --> 00:00:07,020
Okay now I'm going to create a new noom called shipping method.

2
00:00:07,440 --> 00:00:12,030
Note that because enim is a new type we need to define it at the namespace level.

3
00:00:12,060 --> 00:00:12,390
So

4
00:00:24,540 --> 00:00:30,000
now if we don't set any values to the members of this new the first member is going to be automatically

5
00:00:30,000 --> 00:00:31,390
set to zero.

6
00:00:31,500 --> 00:00:36,060
And from there every member's value will be incremented by 1.

7
00:00:36,080 --> 00:00:42,690
Now in terms of best practices I suggest always explicitly set values for these E-News because it's

8
00:00:42,690 --> 00:00:49,470
very likely that somewhere in your database you might have a table that represents this enim.

9
00:00:49,470 --> 00:00:55,320
So you want to make sure the IDs are the values you assign to these new members match to the records

10
00:00:55,320 --> 00:00:57,270
you have in the database.

11
00:00:57,270 --> 00:01:02,730
If you rely on the automatic value assignment and sometime in the future add a new member to this new

12
00:01:03,060 --> 00:01:08,160
the value of some of the existing members may change and may no longer match the records in the database

13
00:01:08,160 --> 00:01:09,580
.

14
00:01:09,690 --> 00:01:10,070
So

15
00:01:16,900 --> 00:01:22,530
OK now we have a new you know it's a new type and we can use it when declaring a variable.

16
00:01:22,560 --> 00:01:23,640
So in the main method

17
00:01:29,310 --> 00:01:31,480
and here we use the dot notation.

18
00:01:31,570 --> 00:01:35,040
Know that Intellisense shows us all the members and this you know.

19
00:01:35,430 --> 00:01:40,080
So let's set it to express.

20
00:01:40,080 --> 00:01:43,590
Now I told you that internally and Ino is an integer.

21
00:01:43,860 --> 00:01:46,140
So I can easily cast that to an integer.

22
00:01:46,230 --> 00:01:49,160
If I want the numeric value of this U.

23
00:01:49,470 --> 00:01:56,290
So let's display the numeric value of this shipping method on the console.

24
00:01:56,310 --> 00:02:00,440
So I put Methot here and then cast it to an integer.

25
00:02:02,760 --> 00:02:05,140
Let's run the application.

26
00:02:06,570 --> 00:02:10,620
So the value of Express is three.

27
00:02:10,800 --> 00:02:14,380
Now there are times that you receive a number from an other system.

28
00:02:14,460 --> 00:02:19,620
It could be your database or it could be a third party application supplying some data and you need

29
00:02:19,620 --> 00:02:25,240
to convert that number that integer to a shipping method in your application.

30
00:02:25,320 --> 00:02:31,440
In situations like that again you can use casting to convert an integer to a shipping method.

31
00:02:31,440 --> 00:02:33,970
Let me show you what I mean.

32
00:02:34,020 --> 00:02:36,870
So imagine we received the number three from somewhere else

33
00:02:40,200 --> 00:02:49,280
and you want to convert that to a shipping method so we can use casting shipping method and put method

34
00:02:49,280 --> 00:02:52,080
id here.

35
00:02:52,920 --> 00:02:56,850
Let's look at the result.

36
00:02:57,600 --> 00:03:02,780
So you see the number 3 represents the express shipping method.

37
00:03:02,850 --> 00:03:09,270
So these are two examples to convert anti-New to and from an integer What about the strings.

38
00:03:09,270 --> 00:03:16,590
There are times that we need to convert and to strings or get us rank and convert it to an enim.

39
00:03:16,590 --> 00:03:21,120
Let's take a look at two more examples here.

40
00:03:21,120 --> 00:03:23,670
So I'm going to convert this method here.

41
00:03:23,780 --> 00:03:34,850
Do you drink so Method dot look at these methods here.

42
00:03:34,980 --> 00:03:39,010
Every object in C-sharp has a method called two string.

43
00:03:39,030 --> 00:03:44,380
So technically you can convert anything to a string without doing any extra work.

44
00:03:44,400 --> 00:03:50,290
So all I have to do here is just to call the two string method and when we run the application we're

45
00:03:50,290 --> 00:03:55,020
going to see Express on the console.

46
00:03:55,050 --> 00:03:55,430
There you go.

47
00:03:55,440 --> 00:03:57,620
Look at the third line.

48
00:03:58,740 --> 00:03:59,100
OK.

49
00:03:59,100 --> 00:04:00,610
No as a tip.

50
00:04:00,820 --> 00:04:03,300
Cancel that right line by default.

51
00:04:03,300 --> 00:04:09,100
Always calls that two string method on any value your password tweet.

52
00:04:09,150 --> 00:04:16,950
So in this example even if I didn't call to string console the right line would still convert that to

53
00:04:17,010 --> 00:04:17,890
a string.

54
00:04:18,510 --> 00:04:23,550
But in case you're not using console the right line and you want to explicitly convert that enim to

55
00:04:23,550 --> 00:04:26,500
a string then you can use the two string method.

56
00:04:27,090 --> 00:04:32,260
So I'm going to revert this back and find example when you have a string.

57
00:04:32,310 --> 00:04:35,270
And we want to convert that to an enim.

58
00:04:35,310 --> 00:04:40,560
Again the reason could be we have that string stored somewhere in the database or in another system

59
00:04:40,580 --> 00:04:41,390
.

60
00:04:42,000 --> 00:04:50,760
So something like this we need to convert this method name to a shipping method enumeration.

61
00:04:51,240 --> 00:04:52,090
How do we do that.

62
00:04:52,350 --> 00:04:58,080
Well before I show you that I want to introduce you to a new term parsing parsing.

63
00:04:58,140 --> 00:05:03,120
In programming means getting a string and converting that to a different type.

64
00:05:03,390 --> 00:05:05,290
So we say we parse the string.

65
00:05:05,520 --> 00:05:08,490
Which means we convert that string to a different type.

66
00:05:08,490 --> 00:05:12,550
So technically here I want to parse the string into a shipping method.

67
00:05:12,570 --> 00:05:13,760
How do we do that.

68
00:05:14,340 --> 00:05:19,420
Well we have a class in Dartmouth called ino.

69
00:05:21,210 --> 00:05:23,730
This class is defined in the system namespace.

70
00:05:23,730 --> 00:05:29,550
So if you don't have using system on the top of your file you need to add that here.

71
00:05:29,700 --> 00:05:32,310
Now this class has a number of static members.

72
00:05:32,460 --> 00:05:37,190
So if you put dot here we can see it's static methods.

73
00:05:37,530 --> 00:05:43,370
And look here we have a method called parce.

74
00:05:43,380 --> 00:05:45,380
Let's look at the parameters of this method.

75
00:05:45,630 --> 00:05:48,490
So open the parentheses again.

76
00:05:48,600 --> 00:05:52,510
So this method has two versions which we call two overloads.

77
00:05:52,710 --> 00:05:55,040
The first one takes two parameters.

78
00:05:55,110 --> 00:05:59,390
The second one takes three parameters.

79
00:05:59,400 --> 00:06:01,440
Let's take a look at a simpler one.

80
00:06:01,440 --> 00:06:04,290
So the first promiser is a type object.

81
00:06:04,290 --> 00:06:10,810
What is a type type is a classic Achmat that represents mental data above other types.

82
00:06:11,490 --> 00:06:17,790
As a pragmatic tip whenever you see that type object you can use that type of operator.

83
00:06:17,790 --> 00:06:21,540
So look type of this is a Keyworth.

84
00:06:21,730 --> 00:06:24,840
This is an operator and takes a parameter.

85
00:06:24,840 --> 00:06:29,620
So here we need to specify the target type that we want to convert the string to.

86
00:06:30,180 --> 00:06:31,950
What is the target type here.

87
00:06:31,950 --> 00:06:36,960
Our shipping method so shipping method here.

88
00:06:37,050 --> 00:06:42,110
Now look at the second parameter of this method string value.

89
00:06:42,120 --> 00:06:47,340
So here I pass method name.

90
00:06:47,340 --> 00:06:49,920
Now look at the return type of this method.

91
00:06:50,280 --> 00:06:53,060
It returns an object.

92
00:06:53,250 --> 00:06:56,580
It does not return a shipping method.

93
00:06:56,580 --> 00:07:03,710
So we need to cast this object to a shipping method which means I go to the beginning of the line.

94
00:07:04,470 --> 00:07:07,490
Use cast your shipping method.

95
00:07:08,070 --> 00:07:14,160
I know I can store the result of this expression into a different variable.

96
00:07:14,490 --> 00:07:18,230
Let's call it shipping method.

97
00:07:19,960 --> 00:07:21,650
Or forgot the semicolon.

98
00:07:21,960 --> 00:07:23,330
There you go.

99
00:07:23,850 --> 00:07:31,000
Now if I hover my mouse over var look the type of our variable is a shipping method.

100
00:07:31,890 --> 00:07:36,270
So this is how you convert or parse a string to an enum or enumeration

