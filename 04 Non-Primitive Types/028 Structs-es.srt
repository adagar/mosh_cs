1
00:00:03,530 --> 00:00:11,340
En C-sharp tambin tenemos otro tipo similar a clases que se llama structure o struct.

2
00:00:11,520 --> 00:00:15,240
Entonces, en trminos de sintaxis, es muy similar a una clase.

3
00:00:15,510 --> 00:00:20,310
La nica diferencia es en el tipo de uso de la palabra clave class que usamos la palabra clave struct.

4
00:00:21,150 --> 00:00:27,510
De manera similar, las estructuras de clases combinan campos y mtodos relacionados.

5
00:00:27,510 --> 00:00:31,890
Pero cul es la diferencia si leo la documentacin de C-sharp.

6
00:00:31,890 --> 00:00:37,410
Vas a ver muchas pequeas diferencias entre clases y estructuras, y

7
00:00:37,410 --> 00:00:41,150
probablemente ests an ms confundido que cuando comenzaste.

8
00:00:41,160 --> 00:00:44,540
Personalmente, no encuentro estas sutiles diferencias muy pragmticas.

9
00:00:44,790 --> 00:00:51,630
De hecho, en el mundo real el 99 por ciento de las veces crear nuevos tipos utilizando clases y no estructuras.

10
00:00:52,920 --> 00:00:59,220
La pauta pragmtica que le doy en esta conferencia es la estructura de uso cuando quiere definir un objeto

11
00:00:59,280 --> 00:01:01,080
pequeo y liviano como este.

12
00:01:01,080 --> 00:01:07,950
RG vuelve a colorear aqu o si se trata de algo as como un punto que tiene una X y una Y, ciertamente

13
00:01:07,950 --> 00:01:09,600
puede definirlo con una clase.

14
00:01:09,600 --> 00:01:10,970
No hay ningn problema.

15
00:01:11,310 --> 00:01:17,280
Pero si se encuentra en una situacin en la que desea crear miles o decenas de miles

16
00:01:17,280 --> 00:01:21,350
de objetos de ese tipo, es ms eficiente definirlos como una estructura.

17
00:01:21,360 --> 00:01:22,830
Si no, no te preocupes por eso.

18
00:01:22,860 --> 00:01:27,160
Solo atngase a las clases porque eso es lo que usa la mayor parte del tiempo.

