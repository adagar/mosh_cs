1
00:00:04,110 --> 00:00:12,300
OK let me start by creating a string called first name so string first name because mush.

2
00:00:12,420 --> 00:00:18,750
Now obviously here we can use the Varn key word because compiler knows we have assigned this valuable

3
00:00:20,040 --> 00:00:25,300
to a string literal so that should be of type string so we can make the code shorter.

4
00:00:25,470 --> 00:00:28,390
So I put the cursor here.

5
00:00:28,500 --> 00:00:35,930
I can manually change that to var or would be sharper Altan enter and enter.

6
00:00:36,000 --> 00:00:38,450
Now let me show you something interesting here.

7
00:00:38,470 --> 00:00:43,060
Cover your mouse over the marquee worth.

8
00:00:43,320 --> 00:00:51,120
Note that this fireball is of type string which is a class that is defined in the System namespace in

9
00:00:51,120 --> 00:00:52,820
the lecture about primitive types.

10
00:00:52,830 --> 00:00:58,510
I explained that all primitive types in C-sharp map to type in the Dot Net framework.

11
00:00:58,890 --> 00:01:04,810
For example let's use that end and declare a variable like number.

12
00:01:05,760 --> 00:01:11,580
If you have your mouse on end you see that's of type in 32.

13
00:01:11,610 --> 00:01:15,650
I know that this in 13:2 is the structure.

14
00:01:15,870 --> 00:01:23,070
So all these keyboards we use in C-sharp like ain't char string float bulled they're all mapped to a

15
00:01:23,070 --> 00:01:31,730
type in the dot net framework the primitive types are all structures like this and or in 32 but the

16
00:01:31,940 --> 00:01:33,510
strings are classes.

17
00:01:33,510 --> 00:01:35,240
So let me remove this.

18
00:01:35,380 --> 00:01:37,210
Look at this one more time.

19
00:01:37,290 --> 00:01:42,410
So we have a class in the System namespace which is called string.

20
00:01:42,450 --> 00:01:52,680
What this means is you can create a string like this using the string keyword in C-sharp or you can

21
00:01:52,680 --> 00:01:56,750
use the string class in the Dot Net Framework.

22
00:01:56,760 --> 00:02:01,370
The difference is when you use this string class you need to import that namespace.

23
00:02:01,440 --> 00:02:03,320
The System namespace on the tongue.

24
00:02:03,480 --> 00:02:10,050
Because here we are writing code inside this namespace but we are accessing a class that is in a different

25
00:02:10,050 --> 00:02:13,110
namespace System namespace.

26
00:02:13,110 --> 00:02:16,470
So if you have resharpened you can automatically import that.

27
00:02:16,470 --> 00:02:21,760
Otherwise you have to go on top of the file and type using system and call it.

28
00:02:22,620 --> 00:02:28,380
So whether you use the string class like this example or using the string keyword

29
00:02:31,470 --> 00:02:32,680
it's exactly the same.

30
00:02:32,690 --> 00:02:33,910
There is no difference.

31
00:02:34,020 --> 00:02:37,790
And that's one of the things that confuses beginners too C-sharp.

32
00:02:37,800 --> 00:02:43,790
Similarly you can create an in 32 using the int32 structure in data framework.

33
00:02:43,950 --> 00:02:47,890
Call it I or you can use int keyword.

34
00:02:48,340 --> 00:02:50,810
They're essentially the same thing.

35
00:02:50,850 --> 00:02:56,720
OK now let's clean up all the extra noise here and get back to our example.

36
00:02:56,760 --> 00:03:00,580
I'm going to change just two var to make the code cleaner.

37
00:03:01,170 --> 00:03:04,680
So one way to create a string is to use concatenation.

38
00:03:04,680 --> 00:03:15,540
So we can declare another string and concatenate three strings together.

39
00:03:16,530 --> 00:03:22,200
But as I explained sometimes it's hard to visualize the output and we can use the string format method

40
00:03:22,200 --> 00:03:22,980
.

41
00:03:23,010 --> 00:03:27,530
So here is an example.

42
00:03:29,880 --> 00:03:37,110
So string again maps to a system that string class and this class has a bunch of static methods as you

43
00:03:37,110 --> 00:03:38,500
can see here.

44
00:03:38,550 --> 00:03:44,060
So these methods are accessible without the need to create an object they're accessible directly on

45
00:03:44,060 --> 00:03:45,600
the string class.

46
00:03:45,600 --> 00:03:50,360
For example you can use the Compare method to comparing strings.

47
00:03:50,430 --> 00:03:53,160
In this case we're going to use the format method.

48
00:03:53,940 --> 00:03:56,090
So this method takes two arguments.

49
00:03:56,280 --> 00:04:03,590
The first one is a format string or a template something like this.

50
00:04:05,490 --> 00:04:08,740
And the other arguments are values to apply to this template.

51
00:04:09,060 --> 00:04:16,180
So I'm going to pass first name and last name at runtime.

52
00:04:16,440 --> 00:04:19,630
What we have here will be replaced by first name.

53
00:04:19,980 --> 00:04:25,350
Same what we have in here will be replaced by last thing.

54
00:04:25,350 --> 00:04:27,690
Now let's take a look at string that join.

55
00:04:27,690 --> 00:04:29,880
So I'm going to create an array of names

56
00:04:46,430 --> 00:04:52,620
and I'm going to create a string by combining all these values using a comma as a separator.

57
00:04:52,620 --> 00:04:53,130
So

58
00:04:57,190 --> 00:05:03,240
we use the join method again a static method on the string class.

59
00:05:03,600 --> 00:05:07,760
The first argument is a string which represents a separator.

60
00:05:07,850 --> 00:05:09,100
You can use coma.

61
00:05:10,140 --> 00:05:12,270
And the second argument is the array.

62
00:05:12,780 --> 00:05:18,170
So names let's display the result on the console.

63
00:05:19,740 --> 00:05:25,820
So formatted names just like that.

64
00:05:27,300 --> 00:05:29,160
So you see John come on Jack.

65
00:05:29,160 --> 00:05:30,460
Come on Mary.

66
00:05:30,600 --> 00:05:35,520
This is a very useful technique when you have some values and you will like to combine them together

67
00:05:35,520 --> 00:05:37,440
using a separator.

68
00:05:37,440 --> 00:05:40,030
Now let's take a look at verbatim strings.

69
00:05:40,680 --> 00:05:45,100
So I'm going to create a string that has multiple lines and has a few paths.

70
00:05:45,180 --> 00:05:46,440
So something like this

71
00:05:55,390 --> 00:06:10,210
.

72
00:06:16,080 --> 00:06:18,100
This string is very unreadable.

73
00:06:18,210 --> 00:06:19,700
So you see the output first.

74
00:06:19,830 --> 00:06:23,950
And then I'm going to show you how we can clean this up using a verbatim string.

75
00:06:24,060 --> 00:06:28,650
So instead of displaying formatted names I'm going to display the text year

76
00:06:31,090 --> 00:06:33,260
.

77
00:06:35,370 --> 00:06:36,770
So this is the output.

78
00:06:37,200 --> 00:06:37,920
Hi John.

79
00:06:37,920 --> 00:06:42,140
Then on a new line look into the falling pants then on to new lines.

80
00:06:42,210 --> 00:06:44,810
We have two paths here.

81
00:06:45,480 --> 00:06:50,590
As you see using a normal string is very hard to format something like that.

82
00:06:50,940 --> 00:06:52,720
So you can use a verbatim string.

83
00:06:52,830 --> 00:07:00,030
All we do is we prefix it with and that's fine then we don't need backslash n we can simply put down

84
00:07:00,030 --> 00:07:01,860
on a new line.

85
00:07:01,860 --> 00:07:03,330
Same here.

86
00:07:03,330 --> 00:07:09,450
Remove the max Leshin on a new line and we can remove all these double backslashes

87
00:07:12,380 --> 00:07:16,580
.

88
00:07:18,210 --> 00:07:22,040
So you see it's much easier to read and understand history.

89
00:07:22,110 --> 00:07:28,380
So whenever you need to use backslash newline or tab use a verbatim string to properly formatted string

90
00:07:28,380 --> 00:07:29,740
.

91
00:07:29,820 --> 00:07:34,350
So that was a quick introduction to strings to get you started later in this course.

92
00:07:34,350 --> 00:07:39,050
We have a separate section where I cover more details about working with strings.

93
00:07:39,070 --> 00:07:41,920
I hope you enjoyed this lecture and thank you for watching.

